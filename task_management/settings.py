# phitron sdp django task_management project
# before postgresql part: https://github.com/phitronio/SDT-Django/tree/module-4
# after postgresql part: https://github.com/phitronio/SDT-Django/tree/main/task-management (cbv at module 15)


"""
Django settings for task_management project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config  # pip install python-decouple



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tasks',
    'users',
    'core', # added at video 10.6
    #'users.apps.UsersConfig', # for signal, auto detect
    #'tasks.apps.TasksConfig', # for signal
    "debug_toolbar", # added at video 7.1
]

MIDDLEWARE = [
	"debug_toolbar.middleware.DebugToolbarMiddleware", #
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',	
]

ROOT_URLCONF = 'task_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # add BASE_DIR/ 'templates' if global template used.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default = ''), # database name in pgAdmin
        'USER': config('DB_USER', default = ''),
        'PASSWORD': config('DB_PASSWORD', default = ''),
        'HOST': config('DB_HOST', default = 'localhost'),
        'PORT': '5432'
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field       

# ---------------------------------------------------------------------------

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


AUTH_USER_MODEL = 'users.CustomUser'

INTERNAL_IPS = ["127.0.0.1",]  # The Debug Toolbar is shown only if your IP address is listed in Djangoâ€™s INTERNAL_IPS


# for sending email
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'users.email_backends.CustomEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # sender's email-id
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD') # password associated with above email-id/google app password (not the regular password)

DEFAULT_FROM_EMAIL = "task_mgmt_app"

# for user account email activation
FRONTEND_URL = config('FRONTEND_URL', default='http://127.0.0.1:8000')  # development
# FRONTEND_URL = "http://localhost:3000"  # common for React/Vite
# FRONTEND_URL = "https://yourapp.com"  # production
# FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')

LOGIN_URL = 'sign-in'


"""
to use image,
install pillo, 
use ImageField in model, 
in views in post forms initialization include request.FILES, 
in form.html in form tag use enctype = 'multipart/form-data',
in settings write MEDIA_URL and MEDIA_ROOT
in urls add them. urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
"""


